# This is GEO analysis package 'GEOsafari'
# Author: Reed Liu 
# From: Bioinfoplanet
# E-mail: bioplanet520@outlook.com
# Require：R>3.5.0
# Main Functions: packup(), prepGSE(), expr(), getGroup(), subAll(), draw(), allDEG(), subDEG(), anno()

## step0: get packages ready
##############################
packup <- function(){
  source("https://bioconductor.org/biocLite.R")
  options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
  biocLite(c("GEOquery","AnnotationDbi","clusterProfiler", 
             "GOSemSim", "enrichplot", "GO.db", "org.Hs.eg.db",
             "topGO","Rgraphviz"))
  if(! require("magrittr")) install.packages("magrittr")
  if(! require("reshape2")) install.packages("reshape2")
  if(! require("tidyverse")) install.packages("tidyverse")
  if(! require("ggpubr")) install.packages("ggpubr")
  if(! require("ggfortify")) install.packages("ggfortify")
  if(! require("factoextra")) install.packages("factoextra")
  if(! require("ComplexHeatmap")) install.packages("ComplexHeatmap")  
  if(! require("dendsort")) install.packages("dendsort")
  if(! require("dendextend")) install.packages("dendextend")
  if(! require("magicfor"))devtools::install_github("hoxo-m/magicfor")
}
##############################

# [Analysis Arguments Needed]: 
# GSE：GEO number(e.g. GSE62832)
# Anno: Annotation of specific GSE platform [https://www.jianshu.com/p/40b560755cdf]
# mtx : 1. efilt(filtered expression matrix); 2.DEG_mtx(Differential Expression Genes matrix)
# grp: Grouplist (case vs control)

# [Enrichment Analysis Arguments]:
# mtx: DEG_mtx
# out: output plot("KEGG","GSEA", "GO")
# type: image type("eps", "ps", "tex" (pictex), "pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf")
# geneclass: class of DEGs ("diff", "up","down") (for enrichment analysis)
# nterm: number of terms(for enrichment analysis, e.g. GO)
# font: label size
# p: p value (default = 0.05)
# q: qvalue (default = 0.2)
# w: width(default = 10)
# h: height(default = 10)
# unit: plot size unit("in", "cm", or "mm", default "in")
# dpi: plot resolution (default = 320)
# change: change perticular plot only

# [Plots Arguments Needed]:
# mtx: matrix data
# grp: group list(e.g. PCA/hclust)
# out: output plot(density plot/ boxplot/PCA/hclust)
# type: image type("eps", "ps", "tex" (pictex), "pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf")
# geneNum: number of genes(for heatmap, default = 30) 
# w: width(default = 10)
# h: height(default = 10)
# unit: plot size unit("in", "cm", or "mm", default "in")
# dpi: plot resolution (default = 320)
# xlab: x axis label
# ylab: y axis label
# main: plot title

## step1: input GEO number into prepGSE()
################################################
prepGSE <- function(GSE, dir = ".") {
  library(GEOquery)
  eSet <- getGEO(GSE, destdir = dir, getGPL = F)
  e = exprs(eSet[[1]])
  pdata = pData(eSet[[1]])
  write.csv(e, paste0(GSE, "_expr.csv"))
  write.csv(pdata, paste0(GSE, "_pdata.csv"))
  save(eSet, file = paste0(GSE, ".eSet.Rdata"))
  return(eSet)
}
#【for example】
(eSet <- prepGSE("GSE17708"))

## step2: get filtered expression matrix
###########################################################################
# GPL to Bioc_anno please refers to https://www.jianshu.com/p/40b560755cdf
expr <- function(GSE, Anno, install.db){
  library(GEOquery)
  library(magrittr)
  library(reshape2)
  bioc <- paste0(Anno,".db") 
  if(install.db == T){
    source("https://bioconductor.org/biocLite.R")
    options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
    biocLite(bioc)
  }
  library(bioc, character.only = T)
  load(paste0(GSE, ".eSet.Rdata"))
  e <- exprs(eSet[[1]])
  s <- toTable(eval(parse(text = paste0(Anno,"SYMBOL"))))
  print("Before filter:")
  print(dim(e))
  efilt <- e[rownames(e)%in%s$probe_id,]
  print("After filter:")
  print(dim(efilt))
  maxp <-  by(efilt,s$symbol,function(x) rownames(x)[which.max(rowMeans(x))])  
  uniprobes <- as.character(maxp)
  efilt <- efilt[rownames(efilt)%in%uniprobes,]
  rownames(efilt) <- s[match(rownames(efilt),s$probe_id),2]
  return(efilt)
}
# 【for example】
efilt <- expr("GSE17708", "hgu133plus2", install.db = F)
###########################################################################

## step3: Get phenotype then take a look to choose which column as group list
###########################################################################

if(T){
  getGroup <- function(){
    library(GEOquery)
    library(magrittr)
    pdata <<- pData(eSet[[1]])
    View(pdata)
    cat("Does there exist a column ready for grouping? (T/F)")
    logi <- scan(what = "character") 
    if(logi == "T"){
      cat("Choose which column name as your group list:","\n","Type some keywords of the column name","\n","Then type 'Enter' twice")
      keyword1 <- scan(what = "character") 
      group_list <<- pdata[,startsWith(colnames(pdata),keyword1)] %>% as.character()
    } else{
      cat("First choose which column name as your group list:","\n","Type some keywords of the column name","\n")
      keyword2 <- scan(what = "character") 
      part <- pdata[,startsWith(colnames(pdata),keyword2)]
      cat("Second input start and end word location (with space):","\n","e.g. 6 -2(start with 6th and end with the last 2ed)")
      keyword3 <- scan(what = "character") 
      a <- strsplit(keyword3," ")[[1]][1]
      b <- strsplit(keyword3," ")[[2]][1]
      group_list <- stringr::word(part, eval(parse(text=a)),eval(parse(text=b))) #%>% gsub(",","") %>% as.character()
      if(grepl(",", group_list) %>% as.factor() %>% levels() == "TRUE"){
        group_list <- gsub(",","",group_list) 
        group_list<- make.names(group_list)
        assign("group_list",group_list,envir = .GlobalEnv)
      } else{
        assign("group_list",group_list,envir = .GlobalEnv)
      }
    }
  } 
  group_list <- getGroup()
  trimgroup <- function(){
    View(group_list)
    cat("Is the group list too long for you?","\n","T/F")
    answer <- scan(what = "character") 
    if(answer == "F")cat("Okay, I'll keep the original one for you") else{
      cat("Control part columns (e.g. 1:3)")
      ctr <- scan(what = "character") 
      ctrart<- group_list[c(eval(parse(text = ctr)))]
      modify <- group_list[-c((eval(parse(text = ctr))))]
      cat("Input start and stop trim position")
      pos <- scan(what = "character") 
      modify<- stringr::str_remove(modify,paste0(pos[1],".*",pos[2],"."))
      group_list <<- c(ctrart,modify)
      View(group_list)
    }
  }
  trimgroup()
}

##[OPTIONAL] 
# if group_list is too long, you can remove part of it [GSE17708 group for example]
trimgroup <- function(){
  View(group_list)
  cat("Is the group list too long for you?","\n","T/F")
  answer <- scan(what = "character") 
  if(answer == "F")cat("Okay, I'll keep the original one for you") else{
    cat("Control part columns (e.g. 1:3)")
    ctr <- scan(what = "character") 
    ctrart<- group_list[c(eval(parse(text = ctr)))]
    modify <- group_list[-c((eval(parse(text = ctr))))]
    cat("Input start and stop trim position")
    pos <- scan(what = "character") 
    modify<- stringr::str_remove(modify,paste0(pos[1],".*",pos[2],"."))
    group_list <<- c(ctrart,modify)
    
  }
}

trimgroup()

##[OPTIONAL] To extract part of expression matrix[e.g. the whole dataset has 4 case and 1 control group but you only want to research 1 or 2 cases and 1 control]
# just have a look of the whole group list, then type keywords of group with space(e.g. untreated 1 2 72), then you will get the four group subsets and for expression subsets


subAll <- function(){ 
  library(magicfor)  
  environment(subAll) <- parent.frame()
  magic_for(print, silent = TRUE)
  View(group_list)
  cat("Input interested group keywords(e.g. un,24,72... )")
  #warning("Wrong keywords")
  names <- scan(what = "character") 
  #get sub.group
  for(i in names){
    x <- group_list[grepl(paste0('\\<',i,'\\>'),group_list)]
    print(x)
  }
  sub.group <<- magic_result_as_vector()
  
  #get sub.efilt
  for(i in names){
    y <- grep(paste0('\\<',i,'\\>'),group_list)
    print(y)
  }
  smp <- magic_result_as_vector()
  sub.efilt <<- as.matrix(efilt)[,smp]
}


#test: extract "72h" and "untreated" information from "GSE17708" 
# must be words or number
subAll()


## step4: check expression martrix with plots【Also can draw many other plots】
##############################################################################################

draw <- function(mtx, degmtx,grp=NULL, out, type, w=10, h=10, unit="in", dpi=320, geneNum=30,xlab=NULL,ylab=NULL,main=NULL,name="plot"){
  library(ggplot2)
  library(ggpubr)
  # density
  if(out == "density"){
    emelt <- function(){
      library(reshape2)
      m_efilt = melt(mtx)
      colnames(m_efilt)=c('symbol','sample','value')
      m_efilt$group=rep(grp,each=nrow(mtx))
      return(m_efilt)
    }
    m_efilt <- emelt()
    p1 <- ggplot(m_efilt,aes(value,col=group))+
      eval(parse(text = paste0("geom_",out, "()")))+
      facet_wrap(~sample, nrow = 4)
    ggsave(paste0(name,"_",out,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    dev.off()
  }
  # boxplot
  if(out == "boxplot"){
    emelt <- function(){
      library(reshape2)
      m_efilt = melt(mtx)
      colnames(m_efilt)=c('symbol','sample','value')
      m_efilt$group=rep(grp,each=nrow(efilt))
      return(m_efilt)
    }
    m_efilt <- emelt()
    p2 <- ggplot(data = m_efilt, aes(x= sample, y = value, fill = group))+
      eval(parse(text = paste0("geom_",out, "()")))+
      ggtitle("Plot of expression value \n Case vs. Control")+
      xlab("Sample") + ylab("Expression value")+
      stat_summary(fun.y="mean",geom="point",shape=24,size=2,fill="orange", alpha =0.5)+
      theme_set(theme_set(theme_bw(base_size=14)))+
      theme(text=element_text(face='plain'),axis.text.x=element_text(angle=60,hjust=1))+
      theme(axis.title.x = element_text(color="black", size=14, face="bold"))+
      theme(axis.title.y = element_text(color="black", size=14, face="bold"))+
      theme(plot.title = element_text(hjust = 0.5))
    ggsave(paste0(name,"_",out,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    dev.off()
  }
  #PCA
  if(out == "PCA"){
    if (is.null(grp)) stop("You need to assign group list to grp")
    library(ggfortify)
    df <- as.data.frame(t(mtx))
    !is.null(grp)
    df$group <- grp
    autoplot(prcomp( df[,1:(ncol(df)-1)]), data=df, colour = 'group') 
    ggsave(paste0(name,"_",out,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    dev.off()
  }
  #hclust
  if(out == "hclust"){
    if (is.null(grp)) stop("You need to assign group list to grp")
    library(factoextra)
    !is.null(grp)
    colnames(mtx) <- paste(grp,1:length(grp),sep=' ')
    dd <- dist(scale(t(mtx)), method = "euclidean")
    hc <- hclust(dd, method = "ward.D2")
    fviz_dend(hc, k = 4, # Cut in four groups
              cex = 1, # label size
              k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
              color_labels_by_k = TRUE, # color labels by groups
              rect = TRUE, # Add rectangle around groups
              rect_border = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"), 
              rect_fill = TRUE,
              horiz = TRUE)
    ggsave(paste0(name,"_",out,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    dev.off()
  }
  #heatmap
  if(out == "heatmap"){
    if(type == "pdf"){
      eval(parse(text = type))(paste0(name,"_","top_",geneNum,"_",out,".",type))
    } else{
      eval(parse(text = type))(paste0(name,"_","top_",geneNum,"_",out,".",type), res = dpi, w, h, unit) 
    }
    library("RColorBrewer")
    top_gene <- head(rownames(degmtx),geneNum)
    if (is.null(mtx)) stop("You need to reload original expression matrix")
    top_matrix <- mtx[top_gene,] 
    top_matrix <- t(scale(t(top_matrix)))
    assign(paste0("top_",geneNum,"_genes"),top_matrix,  envir = .GlobalEnv)
    col <- colorRampPalette(brewer.pal(10, "RdYlBu"))(256)
    labs = colnames(mtx)
    p6 <- heatmap(top_matrix, scale = "none", col =  col, margins = c(5,5),
                  RowSideColors = rep(c("blue", "pink"), each = geneNum/2),
                  ColSideColors = c(rep("purple", length(grp)/2), rep("orange", length(grp)/2)),
                  xlab = xlab, ylab = ylab,
                  labCol="",
                  main = main,
                  add.expr = text(x = seq_along(labs), y = -2.1, srt = 70,
                                  labels = labs, xpd = TRUE))
    dev.off()
  }
  #vocalno
  if(out == "vocalno"){
    logFC_cutoff <- with(mtx,mean(abs(logFC)) + 2*sd(abs(logFC)) ) 
    mtx$result = as.factor(ifelse(mtx$P.Value < 0.05 & abs(mtx$logFC) > logFC_cutoff,
                                  ifelse(mtx$logFC > logFC_cutoff ,'UP','DOWN'),'NOT'))
    this_tile <- paste0('Cutoff for logFC is ',round(logFC_cutoff,3), #round保留小数位数
                        '\nThe number of up gene is ',nrow(mtx[mtx$result =='UP',]) ,
                        '\nThe number of down gene is ',nrow(mtx[mtx$result =='DOWN',])
    )
    library(ggplot2)
    ggplot(data=mtx, aes(x=logFC, y=-log10(P.Value), color=result)) +
      geom_point(alpha=0.4, size=1.75) +
      theme_set(theme_set(theme_bw(base_size=20)))+
      xlab("log2 fold change") + ylab("-log10 p-value") +
      ggtitle( this_tile ) + theme(plot.title = element_text(size=15,hjust = 0.5))+
      scale_colour_manual(values = c('blue','black','red')) 
    ggsave(paste0(name,"_",out,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    dev.off()
  }
}

#test
draw(mtx=efilt,  out="hclust",grp = group_list, type = "png")
draw(mtx=efilt,  out="boxplot",grp = group_list, type = "png")
draw(mtx=efilt,  out="density",grp = group_list, type = "png")
draw(mtx=efilt,  out="PCA",grp = group_list, type = "png")


draw(mtx=sub.efilt,  out="hclust",grp = sub.group, type = "png",name="sub_GSE17708")
draw(mtx=sub.efilt,  out="boxplot",grp = sub.group, type = "png",name="sub_GSE17708")
draw(mtx=sub.efilt,  out="density",grp = sub.group, type = "png",name="sub_GSE17708")
draw(mtx=sub.efilt,  out="PCA",grp = sub.group, type = "png",name="sub_GSE17708")
##############################################################################################

## step5: Get Differential Expression Genes 
##############################################################################################
allDEG <- function(mtx,grp,GSE){
  #limma method
  suppressMessages(library(limma))
  ##prepare matrix、design、contrast
  grp <- make.names(grp)
  mtx <- mtx
  design <- model.matrix(~0+factor(grp))
  colnames(design) <- levels(factor(grp))
  rownames(design) <- colnames(mtx)
  group<<- paste0(unique(grp),collapse = "-")
  contrast<-makeContrasts(group,levels = design)
  
  ##step1
  fit <- lmFit(mtx,design)
  ##step2
  fit2 <- contrasts.fit(fit, contrast) 
  fit2 <- eBayes(fit2)  
  ##step3
  matrix <- topTable(fit2, coef=1, n=Inf)
  DEG_mtx <<- na.omit(matrix) 
  save(DEG_mtx, mtx, file = paste0(GSE,".DEG.Rdata"))
}

subDEG <- function(mtx,grp,GSE){
  #limma method
  suppressMessages(library(limma))
  ##prepare matrix、design、contrast
  grp <- make.names(grp)
  mtx <- mtx
  design <- model.matrix(~0+factor(grp))
  colnames(design) <- levels(factor(grp))
  rownames(design) <- colnames(mtx)
  subgroup <<- paste0(unique(grp),collapse = "-")
  contrast<-makeContrasts(subgroup,levels = design)
  ##step1
  fit <- lmFit(mtx,design)
  ##step2
  fit2 <- contrasts.fit(fit, contrast) 
  fit2 <- eBayes(fit2)  
  ##step3
  matrix <- topTable(fit2, coef=1, n=Inf)
  sub.DEG_mtx <<- na.omit(matrix) 
  save(sub.DEG_mtx, mtx, file = paste0(GSE,".DEG.Rdata"))
}


#test
allDEG(efilt, group_list,GSE = "GSE17708")
subDEG(sub.efilt, sub.group,GSE = "GSE17708_sub")

draw(mtx=efilt, degmtx = DEG_mtx, grp = group_list,out="heatmap",type="png" ,geneNum = 100,xlab="samples",ylab="genes",main="heatmap sample vs genes",name = "GSE17708")

draw(mtx=sub.efilt, degmtx = sub.DEG_mtx, grp = sub.group,out="heatmap",type="png" ,geneNum = 30,xlab="samples",ylab="genes",main="heatmap sample vs genes",name = "sub_GSE17708")

draw(mtx=DEG_mtx,  out="vocalno", type = "pdf",name="GSE17708")
draw(mtx=sub.DEG_mtx,  out="vocalno", type = "png",name="sub_GSE17708")
##############################################################################################

## step6: Enrichment analysis
anno <- function(mtx,out,type, geneclass,nterm = 20, font = 16, p=0.05, q=0.2, w=10, h=10, unit="in", dpi=320, name = "enrichment"){
  # trans id
  if(T){ 
    logFC_cutoff <- with(mtx,mean(abs(logFC)) + 2*sd(abs(logFC)) ) 
    mtx$result = as.factor(ifelse(mtx$P.Value < 0.05 & abs(mtx$logFC) > logFC_cutoff,
                                  ifelse(mtx$logFC > logFC_cutoff ,'UP','DOWN'),'NOT'))
    
    all_gene <- rownames(mtx)
    diff <- rownames(mtx[mtx$result != 'NOT', ]) # diff is DEG that includes up and down
    up <- rownames(mtx[mtx$result =='UP',])
    down <- rownames(mtx[mtx$result =='DOWN',])
    library(clusterProfiler) 
    library(org.Hs.eg.db)
    #diff
    gene_tr <- bitr(diff, fromType = "SYMBOL",
                    toType = c("ENSEMBL", "ENTREZID"),
                    OrgDb = org.Hs.eg.db)
    diff <- gene_tr$ENTREZID
    # up
    gene_tr <- bitr(up, fromType = "SYMBOL",
                    toType = c("ENSEMBL", "ENTREZID"),
                    OrgDb = org.Hs.eg.db)
    up <- gene_tr$ENTREZID
    # down
    gene_tr <- bitr(down, fromType = "SYMBOL",
                    toType = c("ENSEMBL", "ENTREZID"),
                    OrgDb = org.Hs.eg.db)
    down <- gene_tr$ENTREZID
    # all
    gene_tr <- bitr(all_gene, fromType = "SYMBOL",
                    toType = c("ENSEMBL", "ENTREZID"),
                    OrgDb = org.Hs.eg.db)
    all_gene <- gene_tr$ENTREZID
  }
  # make geneList
  if(T){ 
    geneList <- mtx$logFC 
    names(geneList) <- rownames(mtx) 
    geneList_tr <- bitr(names(geneList), 
                        fromType = "SYMBOL",
                        toType = c("ENSEMBL","ENTREZID"),
                        OrgDb = org.Hs.eg.db) 
    new_list <- data.frame(SYMBOL=names(geneList), logFC = as.numeric(geneList)) 
    new_list <- merge(new_list, geneList_tr, by  = "SYMBOL")
    geneList <- new_list$logFC 
    names(geneList) <- geneList_tr$ENTREZID
    GeneList <<- sort(geneList,decreasing = T) 
  }
  #choose outplot
  if(out == "KEGG"){
    # all DEG dotplot
    if(T){
      
      kk1 <- enrichKEGG(gene        = diff,
                        organism     = 'hsa',
                        pvalueCutoff = p)
      dotplot(kk1,showCategory = nterm,color="pvalue",font.size=font) 
      ggsave(paste0(name,out,"_up_down_dot",".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    }
    # UP and DOWN barplot
    if(T){
      #get up/down data
      kk2 <- enrichKEGG(gene   = up,
                        organism     = 'hsa',
                        universe     = all_gene,
                        pvalueCutoff = p,
                        qvalueCutoff =q)
      up_df <- as.data.frame(kk2)
      assign("KEGG_up",up_df,envir = .GlobalEnv)
      
      kk3 <- enrichKEGG(gene   = down,
                        organism     = 'hsa',
                        universe     = all_gene,
                        pvalueCutoff = p,
                        qvalueCutoff =q)
      down_df <- as.data.frame(kk3)
      assign("KEGG_down",down_df,envir = .GlobalEnv)
    }
    if(T){
      down_kk<-KEGG_down[KEGG_down$pvalue<0.05,];down_kk$group=-1
      up_kk<-KEGG_up[KEGG_up$pvalue<0.05,];up_kk$group=1
      
      kegg_plot <- function(up_kk,down_kk){
        environment(kegg_plot) <- parent.frame()
        dat=rbind(up_kk,down_kk)
        dat$pvalue = -log10(dat$pvalue)
        dat$pvalue=dat$pvalue*dat$group 
        dat=dat[order(dat$pvalue,decreasing = F),]
        
        g_kegg<- ggplot(dat, aes(x=reorder(Description,order(pvalue, decreasing = F)), y=pvalue, fill=group)) + 
          geom_bar(stat="identity") + 
          scale_fill_gradient(low="blue",high="red",guide = FALSE) + 
          scale_x_discrete(name ="Pathway names") +
          scale_y_continuous(name ="log10P-value") +
          coord_flip() + theme_bw()+theme(plot.title = element_text(hjust = 0.5))+
          ggtitle("Pathway Enrichment") 
      }
      
      kegg_plot(up_kk,down_kk)
      ggsave(paste0(name,out,"_up_down_bar.",type), device = type, width = w, height = h, units = unit, dpi=dpi)
    }
    # pathview
    if(T){
      library("pathview")
      kk4 <<- gseKEGG(geneList     = GeneList,
                      organism     = 'hsa',
                      nPerm        = 1000,
                      minGSSize    = 120,
                      pvalueCutoff = p,
                      verbose      = F)
      print(head(kk4)[,1:6])
      cat("Input your interested pathway:")
      gsetID <- scan(what = "character") 
      pathview(gene.data  = GeneList,
               pathway.id = gsetID,
               species    = "hsa",
               limit      = list(gene=max(abs(GeneList)), cpd=1))
    }
    dev.off()
  }
  if(out == "GSEA"){
    gsea <- function(){
      environment(gsea) <- parent.frame()
      print(head(kk4)[,1:6])
      cat("Input your interested pathway:")
      gsetIDlist <- scan(what = "character") #input several ids
      # gsea plot
      for (i in gsetIDlist){ #for each gset id plotting
        gseaplot(kk4, geneSetID = i)
        ggsave(paste0(out,"_",i,".",type),device = type, width = w, height = h, units = unit, dpi = dpi)
      }
    }
    gsea()
  }
  if(out == "GO"){
    GOenrich <- function(){
      environment(GOenrich) <- parent.frame()
      cat("Choose your interested ontology:","\n","MF/BP/CC","\n","Then type 'Enter' twice")
      GOont <- scan(what = "character") 
      for (i in GOont){
        ego <- enrichGO(gene          = eval(parse(text = geneclass )),
                        universe      = names(GeneList),
                        OrgDb         = org.Hs.eg.db,
                        ont           = i,
                        pAdjustMethod = "BH",
                        pvalueCutoff  = p,
                        qvalueCutoff  = 0.05,
                        readable      = TRUE)
        write.table(ego, file = paste0(name,"GO_",geneclass,"_",i,".xls"), sep = "\t")
        ggo <- groupGO(gene     = eval(parse(text = geneclass )),
                       OrgDb    = org.Hs.eg.db,
                       ont      = i,
                       level    = 3,
                       readable = TRUE)
        write.table(ggo, file = paste0(name,"group_GO_",geneclass,"_",i,".xls"),sep = "\t")
        # GO dotplot
        cat("Perpare to plot GO dotplot for",i,"\n")
        dotplot(ego,showCategory=nterm, title=paste0("EnrichmentGO_",i,"_dot"))
        ggsave(paste0(name,geneclass,out,"_dot",i,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
        cat("GO dot plot for",i,"finished","\n","","\n")
        # GO bar plot
        cat("Perpare to plot GO bar plot for",i,"\n")
        barplot(ego, showCategory=nterm, title=paste0("EnrichmentGO_",i))
        ggsave(paste0(name,geneclass,out,"_bar",i,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
        cat("GO bar plot for",i,"finished","\n","","\n")
        # GO pathway
        if(type == "pdf"){
          eval(parse(text = type))(paste0(name,geneclass,out,"_",i," pathway",".",type))
        } else{
          eval(parse(text = type))(paste0(name,geneclass,out,"_",i," pathway",".",type), res = dpi, w, h, unit) 
        }
        cat("Perpare to plot GO pathway for",i,"\n")
        library(Rgraphviz)
        library(topGO)
        plotGOgraph(ego)
        cat("GO pathway plot for",i,"finished","\n","","\n")
        # GO group plot
        cat("Perpare to plot GO group bar plot for",i,"\n")
        barplot(ggo, drop=TRUE, showCategory=nterm)
        ggsave(paste0(name,geneclass,out,"_Group_bar",i,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
        cat("GO group bar plot for",i,"finished","\n","","\n")
        # GO map plot
        cat("Perpare to plot GO map plot for",i,"\n")
        emapplot(ego)
        ggsave(paste0(name,geneclass,out,"_map",i,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
        cat("GO map plot for",i,"finished","\n","","\n")
        # GO network plot
        cat("Perpare to plot GO network plot for",i,"\n")
        cnetplot(ego, categorySize="pvalue", foldChange=GeneList)
        ggsave(paste0(name,geneclass,out,"_network",i,".",type), device = type, width = w, height = h, units = unit, dpi=dpi)
        cat("GO network plot for",i,"finished","\n","","\n")
      }
    }
    GOenrich()
    dev.off()
  }
}

#test [diff between one vs one]
anno(DEG_mtx, "KEGG", "png", p=0.9, name="GSE62832")
anno(DEG_mtx, "GSEA", "png", p = 0.8)
anno(sub.DEG_mtx, "KEGG", "png", p=0.9, q=0.8, name = "sub_GSE17708")
anno(sub.DEG_mtx, "GSEA", "png", p = 0.9)
anno(DEG_mtx, "GO",geneclass = "diff",p=0.5, "png")
anno(sub.DEG_mtx, "GO",geneclass = "up",p=0.5, "png")









