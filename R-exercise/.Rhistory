ls("package:org.Hs.eg.db")
toTable(org.Hs.egOMIM)
ls("package:org.Hs.eg.db")
toTable(org.Hs.egGO)
toTable(org.Hs.egGO) %>% head
# GO信息
g2go <- toTable(org.Hs.egGO);head(g2go)
tmp <- merge(tmp, g2go, by="gene_id")
View(tmp)
tmp <- merge(tmp, g2go, by="gene_id")
ls("package:org.Hs.eg.db")
toTable(org.Hs.egMAP) %>% head
toTable(org.Hs.egUNIPROT) %>% head
toTable(org.Hs.egUNIGENE2EG) %>% head
toTable(org.Hs.egUCSCKG) %>% head
toTable(org.Hs.egORGANISM) %>% head
toTable(org.Hs.egACCNUM) %>% head
View(tmp)
rm(list=ls())
options(stringsAsFactors = F)
a=read.table('e1.txt')
suppressMessages(library(org.Hs.eg.db))
# ls("package:org.Hs.eg.db")
g2s <- toTable(org.Hs.egSYMBOL);head(g2s)
g2e <- toTable(org.Hs.egENSEMBL);head(g2e)
library(stringr)
a$ensembl_id = lapply(a$V1, function(x){
str_split(x,'[.]')[[1]][1]
}) %>% unlist
tmp <- merge(a,g2e, by="ensembl_id")
tmp <- merge(tmp,g2s, by="gene_id")
# 根据org.Hs.eg.db信息，可以继续添加其他信息，比如CHR信息
g2c <- toTable(org.Hs.egCHR);head(g2c)
tmp <- merge(tmp, g2c, by="gene_id")
View(tmp)
## 找到symbol ID对应的gene type
hgnc <- read.csv('~/Downloads/gene-group.txt', sep = "\t")
View(hgnc)
names(tmp)
names(tmp)[1]
names(hgnc)
names(tmp)[1] <- "NCBI.Gene.ID"
names(tmp)
hgnc <- hgnc[,c("NCBI.Gene.ID","Locus.type")]
View(hgnc)
tmp <- merge(tmp,hgnc, by="NCBI.Gene.ID")
View(tmp)
## Exercise 1: Probe to Symbol ID
# 根据探针名找对应symbol ID
rm(list=ls())
## Exercise 1: Probe to Symbol ID
# 根据探针名找对应symbol ID
rm(list=ls())
## Exercise 1: Probe to Symbol ID
# 根据探针名找对应symbol ID
rm(list=ls())
options(stringsAsFactors = F)
options(stringsAsFactors = F)
options(stringsAsFactors = F)
options(stringsAsFactors = F)
a=read.table('e2.txt')
a=read.table('e2.txt')
a=read.table('e2.txt')
a
library(hgu133a.db)
if(length(getOption("CRAN"))==0) options(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")
if(!require("BiocManager")) install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0) options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hgu133a.db", version = "3.8")
install.packages("BiocManager")
install.packages("BiocManager")
# install bioconductor pkgs
if(T){
if(!require("BiocManager"))
install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
}
library(BiocManager)
library(BiocManager)
BiocManager:::.version_map_get()
install.packages("hgu133a.db")
install.packages("tydyverse")
install.packages("tydyverse")
install.packages("hgu133a.db")
install.packages("ggplot2")
# install bioconductor pkgs
if(T){
if(!require("BiocManager"))
install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
}
# install bioconductor pkgs
if(T){
if(!require("BiocManager"))
install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
}
update.packages()
update.packages(ask = F)
update.packages()
install.packages("ggplot2")
update.packages()
# install bioconductor pkgs
######################################
# Problem Report: Error in install.packages : error reading from connection
#
if(T){
if(!require("BiocManager"))
install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
}
library(hgu133a.db)
？hgu133a.db
?hgu133a.db
ls("package:hgu133a.db")
# ls("package:hgu133a.db")
p2s=toTable(hgu133aSYMBOL);head(p2s)
a=read.table('e2.txt')
## Exercise 2: Probe to Symbol ID
# 根据探针名找对应symbol ID
rm(list=ls())
options(stringsAsFactors = F)
a=read.table('e2.txt')
# install bioconductor pkgs
######################################
# BUG REPORT: 安装什么软件都提示这个信息
# “Error in install.packages : error reading from connection”
# TROUBLE SHOTTING:
# 修改Global options中的pkgs的安装源即可
######################################
if(T){
if(!require("BiocManager"))
install.packages("BiocManager",update = F,ask = F)
if(length(getOption("BioC_mirror"))==0)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
for (pkg in c("hgu133a.db")){
if (! require(pkg,character.only=T) ) {
BiocManager::install(pkg,ask = F,update = F)
require(pkg,character.only=T)
}
}
}
a
library(hgu133a.db)
# ls("package:hgu133a.db")
p2s=toTable(hgu133aSYMBOL);head(p2s)
# ls("package:hgu133a.db")
p2s=toTable(hgu133aSYMBOL);head(p2s)
names(a)
names(a) <- names(p2s)
names(p2s)
names(a) <- names(p2s)[1]
a
tmp <- merge(a,p2s, by="probe_id")
tmp
# 方法二：利用match得到坐标
match(a$probe_id,p2s$probe_id)
tmp2 <- p2s[match(a$probe_id,p2s$probe_id),]
tmp2
# 方法一：利用merge
tmp1 <- merge(a,p2s, by="probe_id")
tmp1
tmp1
tmp2
?identical
identical(tmp1,tmp2)
tmp2$probe_id[1]
tmp2$probe_id[1] <- "hah"
identical(tmp1,tmp2)
# 判断得到的两组结果是否一致
identical(tmp1,tmp2)
tmp2$probe_id[1] <-"1053_at"
# 判断得到的两组结果是否一致
identical(tmp1,tmp2)
compare(tmp1,tmp2,allowAll=TRUE)
install.packages("compare")
compare(tmp1,tmp2,allowAll=TRUE)
library(compare)
compare(tmp1,tmp2,allowAll=TRUE)
tmp2$probe_id[1] <-"1053"
compare(tmp1,tmp2,allowAll=TRUE)
comparison <- compare(tmp1,tmp2,allowAll=TRUE)
comparison <- compare(tmp1,tmp2,allowAll=TRUE)
comparison$tM
library(dplyr)
setdiff(tmp1,tmp2)
tmp2$probe_id[1] <-"1053_at"
setdiff(tmp1,tmp2)
?identical
tmp2$probe_id[1] <-"1053"
tmp1
tmp2
# 法二：
dplyr::setdiff(tmp1,tmp2) #返回两组的差别【没差就返回空】
suppressMessages(library(CLL))
?CLL
data(sCLLex)
sCLLex
phenoData(sCLLex)
experimentData(sCLLex)
assayData(sCLLex)
# sCLLex看一下
exprSet=exprs(sCLLex)
exprSet
exprSet[1:4][1:4]
exprSet[1:4]
exprSet[1:4,1:4]
sCLLex
# exprSet[1:4,1:4]
library(hgu95av2.db)
p2s=toTable(hgu95av2SYMBOL);head(p2s)
# exprSet[1:4,1:4]
pdata <- pData(sCLLex)
pdata
head(pdata)
View(p2s)
View(exprSet)
exprSet["1939_at",]
# boxplot
boxplot(exprSet["1939_at",] ~ pdata$Disease)
ToothGrowth
View(p2s)
boxplot(exprSet["1974_s_at",] ~ pdata$Disease)
boxplot(exprSet["31618_at",] ~ pdata$Disease)
# boxplot [find TP53 has 3 probe IDs]
boxplot(exprSet["1939_at",] ~ pdata$Disease)
boxplot(exprSet["1974_s_at",] ~ pdata$Disease)
boxplot(exprSet["31618_at",] ~ pdata$Disease)
e <- ggplot(ToothGrowth, aes(x = dose, y = len))
library(ggplot2)
e <- ggplot(ToothGrowth, aes(x = dose, y = len))
e
e + geom_boxplot()
e + geom_boxplot(notch = TRUE, fill = "lightgray")+
stat_summary(fun.y = mean, geom = "point",
shape = 18, size = 2.5, color = "#FC4E07")
e + geom_boxplot(aes(color = dose))+
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
# boxplot [find TP53 has 3 probe IDs]
boxplot(exprSet["1939_at",] ~ pdata$Disease)
boxplot(exprSet["1974_s_at",] ~ pdata$Disease)
boxplot(exprSet["31618_at",] ~ pdata$Disease)
noquote("hah")
a <- read.table("e4-plot.txt")
a <- read.csv("e4-plot.txt")
## Exercise 4: BRAC1 in TCGA
# 从内置数据集的表达矩阵中找TP53基因的表达量
rm(list=ls())
options(stringsAsFactors = F)
a <- read.csv("e4-plot.txt")
View(a)
a <- read.csv("e4-plot.txt", sep = "\t")
View(a)
# boxplot
colnames(a)
# boxplot
colnames(a) <- c("id", "subtype", "expression", "mut")
install.packages("ggstatsplot")
# install.packages("ggstatsplot")
library(ggstatsplot)
a
colnames(a)
ggbetweenstats(data = a,
x = subtype,
y = expression)
a <- read.csv('e5-BRCA_7157_50_50.csv')
View(a)
colnames(a)
library(ggstatsplot)
ggbetweenstats(data = a,
x = Group,
y = Expression)
# second survival analysis
library(ggplot2)
library(survival)
library(survminer)
table(a$Status)
dat <- a
# first boxplot
library(ggstatsplot)
ggbetweenstats(data = dat,
x = Group,
y = Expression)
table(dat$Status)
dat$Status
dat$Status <- ifelse(dat$Status == "Dead", 1, 0)
dat$Status
View(dat)
sfit <- survfit(Surv(Days,Status)~Group, data=dat)
sfit
summary(sfit)
ggsurvplot(sfit, conf.int = F, pval = T)
# complex survplot
ggsurvplot(sfit,palette = c("orange", "navyblue"),
risk.table = T, pval = T,
conf.int = T, xlab = "Time",
ggtheme = theme_light(),
ncensor.plot = T)
cor(1:10,1:10)
a=rnorm(10)
b=rnorm(10)
cor(a,b)
b=10*a+rnorm(10)
cor(a,b)
## Exercise 6: Correlation Analysis
# Use http://www.oncolnc.org/ to get raw csv da
rm(list=ls())
options(stringsAsFactors = F)
#用bioconductor的数据包airway包来做
#########################################
# TIP2: Bioconductor有三种包：软件包、数据包、注释包
#########################################
library(airway)
#用bioconductor的数据包airway包来做
#########################################
# TIP2: Bioconductor有三种包：软件包、数据包、注释包
#########################################
suppressMessages(library(airway))
airway
data(airway)
airway
?airway
expr <- assay(airway)
dim(expr)
dim(expr);colnames(expr)
# first look at original correlation
cor(expr)
# first look at original correlation and plot heatmap
library(pheatmap)
pheatmap(cor(expr))
# 可以看到，原始矩阵的各个样本建相关性都很高，这样其实
# 不对，因为毕竟有处理、对照组。为了再次确定，可以去看
# 样本信息
phenoData(expr)
# 可以看到，原始矩阵的各个样本建相关性都很高，这样其实
# 不对，因为毕竟有处理、对照组。为了再次确定，可以去看
# 样本信息
phenoData(airway)
airway
# 可以看到，原始矩阵的各个样本建相关性都很高，这样其实
# 不对，因为毕竟有处理、对照组。为了再次确定，可以去看
# 样本信息
colData(airway)
# 可以看到，原始矩阵的各个样本建相关性都很高，这样其实
# 不对，因为毕竟有处理、对照组。为了再次确定，可以去看
# 样本信息
colData(airway)[,3]
# 可以看到，原始矩阵的各个样本建相关性都很高，这样其实
# 不对，因为毕竟有处理、对照组。为了再次确定，可以去看
# 样本信息
grp <- colData(airway)[,3]
grp_df <- data.frame(grp)
grp_df
rownames(grp_df)
rownames(grp_df) <- colnames(expr)
grp_df
pheatmap(cor(expr), annotation_col = grp_df)
## second remove those non-representative data (e.g. 0)
apply(expr, 1, function(x){sum(x)})
## second remove those non-representative data (e.g. 0)
apply(expr, 1, function(x) sum(x))
## second remove those non-representative data (e.g. 0)
apply(expr, 1, function(x){sum(x>1)} > 5)
View(expr)
## second remove those non-representative data (e.g. 0)
x <- expr[1,]
x
x > 1
sum(x>1)
sum(x>1) > 5
apply(expr, 1, function(x) sum(x>1)>5)
expr[apply(expr, 1, function(x) sum(x>1)>5),]
## second remove those non-representative data (e.g. 0)
#########################################
# TIP3: HOW DOES APPLY WORK?
# x means each row of expr; we want to know if every value in x > 1 => "x>1" (return T/F)
# then we calculate how many values in x >1 => "sum(x>1)" (T means 1, so it can be summed)
# then if there are five values > 1 => "sum(x>1)>5" (return T/F)
# finally we select these x rows
#########################################
dim(expr)
dim(expr)
expr <- expr[apply(expr, 1, function(x) sum(x>1) > 5),]
dim(expr)
suppressMessages(library(org.Hs.eg.db))
# ls("package:org.Hs.eg.db")
g2s <- toTable(org.Hs.egSYMBOL);head(g2s)
g2e <- toTable(org.Hs.egENSEMBL);head(g2e)
a <- expr
a <- rownames(expr)
a
tmp <- merge(a,g2e, by="ensembl_id")
a
a <- rownames(expr);head
a <- rownames(expr);head(a)
a <- rownames(expr);names(a)
a <- as.data.frame(rownames(expr))
View(a)
colnames(a) <- "ensembl_id"
View(a)
tmp <- merge(a,g2e, by="ensembl_id")
tmp <- merge(tmp,g2s, by="gene_id")
View(tmp)
hgnc <- read.csv('~/Downloads/gene-group.txt', sep = "\t")
hgnc <- hgnc[,c("NCBI.Gene.ID","Locus.type")]
names(tmp)[1] <- "NCBI.Gene.ID"
tmp <- merge(tmp,hgnc, by="NCBI.Gene.ID")
View(tmp)
dplyr::count(tmp,Locus.type)
dplyr::count(tmp,Locus.type,sort = T)
gtype <- dplyr::count(tmp,Locus.type,sort = T)
## third we use edgeR::cpm to remove library size effect
expr <- log(edgeR::cpm(expr)+1)
View(expr)
gtype
tmp
View(tmp)
match(rownames(expr), tmp$ensembl_id)
match(rownames(expr), tmp$ensembl_id) %>% na.omit()
a <- as.data.frame(rownames(expr))
colnames(a) <- "ensembl_id"
tmp <- merge(a,g2e, by="ensembl_id")
View(tmp)
?match
tmp <- merge(tmp,g2s, by="gene_id")
View(tmp)
match(tmp$ensembl_id,a)
a
match(tmp$ensembl_id,a$ensembl_id)
tmp$symbol[match(tmp$ensembl_id,a$ensembl_id),]
tmp$symbol[match(tmp$ensembl_id,a$ensembl_id)
tmp$symbol[match(tmp$ensembl_id,a$ensembl_id)]
tmp[match(tmp$ensembl_id,a$ensembl_id),]
tmp[match(tmp$ensembl_id,a$ensembl_id),] %>% head()
dim(expr)
apply(expr,1,mad)
## forth we choose 500 signicant-expressed genes
sort(apply(expr,1,mad),decreasing = T)
## forth we choose 500 signicant-expressed genes
sort(apply(expr,1,mad),decreasing = T) %>% head
## forth we choose 500 signicant-expressed genes
sort(apply(expr,1,mad),decreasing = T)[1:500]
## forth we choose 500 signicant-expressed genes
sort(apply(expr,1,mad),decreasing = T)[1:500] %>% names
## forth we choose 500 signicant-expressed genes
expr <- expr[sort(apply(expr,1,mad),decreasing = T)[1:500] %>% names,]
dim(expr)
View(expr)
## fifth we do log2 transform and re-calculate the correlation
newcor <- cor(log2(expr+1))
newcor
View(newcor)
pheatmap(newcor, annotation_col = grp_df)
pheatmap(newcor, annotation_col = grp_df,filename = "after-trans-cor.png")
pheatmap(newcor, annotation_col = grp_df,filename = "e6-after-trans-cor.png")
## Exercise 6: Correlation Analysis
# 核心：cor()、reduce dimensions of expr
rm(list=ls())
options(stringsAsFactors = F)
suppressMessages(library(CLL))
?CLL
data(sCLLex)
CLL
sCLLex
expr <- exprs(sCLLex)
dim(expr)
dim(expr)
pdata <- pData(sCLLex)
pdata
View(pdata)
expr[1:4,1:4]
pdata <- pData(sCLLex)
expr[1:4,1:4]
boxplot(expr)
dev.off()
boxplot(expr)
